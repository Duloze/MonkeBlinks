using System;
using BepInEx;
using UnityEngine;
using Utilla;

namespace GorillaTagModTemplateProject
{
	/// <summary>
	/// This is your mod's main class.
	/// </summary>

	/* This attribute tells Utilla to look for [ModdedGameJoin] and [ModdedGameLeave] */
	[ModdedGamemode]
	[BepInDependency("org.legoandmars.gorillatag.utilla", "1.5.0")]
	[BepInPlugin(PluginInfo.GUID, PluginInfo.Name, PluginInfo.Version)]
	public class Plugin : BaseUnityPlugin
	{
		bool inRoom;

		void Start()
		{
			/* A lot of Gorilla Tag systems will not be set up when start is called /*
			/* Put code in OnGameInitialized to avoid null references */

			Utilla.Events.GameInitialized += OnGameInitialized;
		}

		void OnEnable()
		{
			/* Set up your mod here */
			/* Code here runs at the start and whenever your mod is enabled*/

			HarmonyPatches.ApplyHarmonyPatches();
		}

		void OnDisable()
		{
			/* Undo mod setup here */
			/* This provides support for toggling mods with ComputerInterface, please implement it :) */
			/* Code here runs whenever your mod is disabled (including if it disabled on startup)*/

			HarmonyPatches.RemoveHarmonyPatches();
		}

		void OnGameInitialized(object sender, EventArgs e)
		{
			/* Code here runs after the game initializes (i.e. GorillaLocomotion.Player.Instance != null) */
		}

		void Update()
		{
			/* Code here runs every frame when the mod is enabled */
		}

		/* This attribute tells Utilla to call this method when a modded room is joined */
		[ModdedGamemodeJoin]
		public void OnJoin(string gamemode)
		{
			/* Activate your mod here */
			/* This code will run regardless of if the mod is enabled*/

			inRoom = true;
		}

		/* This attribute tells Utilla to call this method when a modded room is left */
		[ModdedGamemodeLeave]
		public void OnLeave(string gamemode)
		{
			/* Deactivate your mod here */
			/* This code will run regardless of if the mod is enabled*/

			inRoom = false;
		}
	}
}
using System.Collections;
using UnityEngine;

public class Blink : MonoBehaviour
{
    public float blinkDelay = 0.1f;
    public float blinkDuration = 0.1f;
    public float blinkDistance = 0.3f;

    private bool blinking = false;

    private void Update()
    {
        if (!blinking && Input.GetKeyDown(KeyCode.Space))
        {
            StartCoroutine(BlinkCoroutine());
        }
    }

    private IEnumerator BlinkCoroutine()
    {
        blinking = true;

        Vector3 startPosition = transform.position;
        Vector3 endPosition = transform.position + (transform.forward * blinkDistance);

        float t = 0.0f;
        while (t < 1.0f)
        {
            t += Time.deltaTime / blinkDuration;
            transform.position = Vector3.Lerp(startPosition, endPosition, t);
            yield return null;
        }

        yield return new WaitForSeconds(blinkDelay);

        t = 0.0f;
        while (t < 1.0f)
        {
            t += Time.deltaTime / blinkDuration;
            transform.position = Vector3.Lerp(endPosition, startPosition, t);
            yield return null;
        }

        blinking = false;
    }
}
